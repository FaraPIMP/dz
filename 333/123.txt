import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import sqlite3
import bcrypt

class Database:
    def __init__(self):
        self.conn = sqlite3.connect('cinema.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL UNIQUE,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def insert_user(self, username, password):
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        try:
            self.cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
            self.conn.commit()
        except sqlite3.IntegrityError:
            return False  # Пользователь уже существует
        return True

    def get_user(self, username):
        self.cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

class App:
    def __init__(self, root):
        self.db = Database()
        self.root = root
        self.setup_ui()

    def setup_ui(self):
        self.root.title("Авторизация")
        self.root.geometry('400x300')
        self.load_background()

        self.frame = tk.Frame(self.root)
        self.frame.place(relx=0.5, rely=0.5, anchor="center")

        tk.Label(self.frame, text="Логин", bg="white").grid(row=0, column=0)
        self.username_entry = tk.Entry(self.frame)
        self.username_entry.grid(row=0, column=1)

        tk.Label(self.frame, text="Пароль", bg="white").grid(row=1, column=0)
        self.password_entry = tk.Entry(self.frame, show="*")
        self.password_entry.grid(row=1, column=1)

        tk.Button(self.frame, text="Войти", command=self.login).grid(row=2, column=1)
        tk.Button(self.frame, text="Регистрация", command=self.open_registration_window).grid(row=3, column=1)
        tk.Button(self.frame, text="Восстановление пароля", command=self.open_restore_account_window).grid(row=4, column=1)

    def load_background(self):
        try:
            bg_image = Image.open("foto.png")
            bg_image = bg_image.resize((400, 300), Image.ANTIALIAS)
            bg_photo = ImageTk.PhotoImage(bg_image)
            canvas = tk.Canvas(self.root, width=400, height=300)
            canvas.pack(fill="both", expand=True)
            canvas.create_image(0, 0, image=bg_photo, anchor="nw")
        except FileNotFoundError:
            messagebox.showerror("Ошибка", "Фоновое изображение не найдено.")

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get().encode('utf-8')

        user = self.db.get_user(username)
        if user and bcrypt.checkpw(password, user[2].encode('utf-8')):
            messagebox.showinfo("Успешно", "Авторизация прошла успешно!")
        else:
            messagebox.showerror("Ошибка", "Неверный логин или пароль")

    def open_registration_window(self):
        # Реализуйте окно регистрации...
        pass

    def open_restore_account_window(self):
        # Реализуйте окно восстановления...
        pass

    def close(self):
        self.db.close()

# Запуск приложения
if __name__ == "__main__":
    root = tk.Tk()
    app = App(root)
    root.protocol("WM_DELETE_WINDOW", app.close)
    root.mainloop()
